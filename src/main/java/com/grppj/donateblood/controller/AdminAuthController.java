package com.grppj.donateblood.controller;

import com.grppj.donateblood.model.Hospital;
import com.grppj.donateblood.model.User;
import com.grppj.donateblood.repository.HospitalRepository;
import com.grppj.donateblood.repository.UserRepository;
import com.grppj.donateblood.service.EmailService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpSession;

import java.util.List;
import java.util.Random;

@Controller
@RequestMapping("/admin")
public class AdminAuthController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private HospitalRepository hospitalRepo;

    @Autowired
    private EmailService emailService;

    // Step 1: Show login page
    @GetMapping("/login")
    public String loginPage(Model model) {
        model.addAttribute("showCodeInput", false);
        return "admin/login";
    }

    // Step 2: Submit email → check if first login or normal login
    @PostMapping("/send-code")
    public String sendCode(@RequestParam String email, Model model, HttpSession session) {
        User admin = userRepository.findAdminByEmail(email);
        if (admin == null) {
            model.addAttribute("error", "Admin not found!");
            return "admin/login";
        }

        // First login (password null)
        if (admin.getPassword() == null || admin.getPassword().isEmpty()) {
            // Send OTP from database (auto_generated_code)
            String code = admin.getAutoGeneratedCode();
            if (code == null || code.isEmpty()) {
                // Generate new OTP if missing
                code = String.valueOf(100000 + new Random().nextInt(900000));
                userRepository.saveOTP(email, code);
            }

            emailService.sendVerificationCode(email, code); // send email
            session.setAttribute("pendingAdminEmail", email);
            model.addAttribute("showCodeInput", true);
            model.addAttribute("success", "OTP sent to your email!");
            return "admin/login";
        }

        // Already has password → show password form
        model.addAttribute("showPasswordForm", true);
        model.addAttribute("email", email);
        return "admin/login";
    }

    // Step 3: Verify OTP (first login)
    @PostMapping("/verify-code")
    public String verifyOTP(@RequestParam String code, HttpSession session, Model model) {
        String email = (String) session.getAttribute("pendingAdminEmail");
        if (email == null) {
            model.addAttribute("error", "Session expired. Please login again.");
            return "admin/login";
        }

        boolean verified = userRepository.verifyAdminOTP(email, code);
        if (!verified) {
            model.addAttribute("error", "Invalid OTP!");
            model.addAttribute("showCodeInput", true);
            return "admin/login";
        }

        // OTP correct → allow password reset
        User admin = userRepository.findAdminByEmail(email);
        session.setAttribute("pendingAdminForPassword", admin);
        model.addAttribute("showSetPasswordForm", true);
        return "admin/login";
    }

    // Step 4: Set password (first login)
    @PostMapping("/set-password")
    public String setPassword(@RequestParam String password,
                              @RequestParam String confirmPassword,
                              HttpSession session,
                              Model model) {
        User admin = (User) session.getAttribute("pendingAdminForPassword");
        if (admin == null) {
            model.addAttribute("error", "Session expired.");
            return "admin/login";
        }

        if (!password.equals(confirmPassword)) {
            model.addAttribute("error", "Passwords do not match.");
            model.addAttribute("showSetPasswordForm", true);
            return "admin/login";
        }

        // Update password in DB and clear OTP
        userRepository.setAdminPassword(admin.getId(), password);
        admin.setPassword(password);

        session.removeAttribute("pendingAdminForPassword");

        // Set hospital session
        setHospitalSession(admin, session);

        // Login admin
        session.setAttribute("admin", admin);
        return "redirect:/admin/dashboard";
    }

    // Step 5: Normal login (subsequent logins)
    @PostMapping("/login")
    public String loginWithPassword(@RequestParam String email,
                                    @RequestParam String password,
                                    HttpSession session,
                                    Model model) {
        User admin = userRepository.adminLogin(email, password);
        if (admin == null) {
            model.addAttribute("error", "Incorrect email or password.");
            model.addAttribute("showPasswordForm", true);
            model.addAttribute("email", email);
            return "admin/login";
        }

        // Set hospital session
        setHospitalSession(admin, session);

        session.setAttribute("admin", admin);
        return "redirect:/admin/dashboard";
    }

    // Logout
    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/admin/login";
    }

    // ================= Helper =================
    private void setHospitalSession(User admin, HttpSession session) {
        Integer hospitalId = admin.getHospitalId();

        if (hospitalId == null) {
            List<Hospital> hospitals = hospitalRepo.findAll();
            if (!hospitals.isEmpty()) hospitalId = hospitals.get(0).getId();
        }

        if (hospitalId != null) {
            session.setAttribute("HOSPITAL_ID", hospitalId);
            Hospital hospital = hospitalRepo.findById(hospitalId);
            if (hospital != null) session.setAttribute("HOSPITAL_NAME", hospital.getHospitalName());
        }
    }
}
