package com.grppj.donateblood.repository;

import java.time.LocalDateTime;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import com.grppj.donateblood.model.RoleBean;
import com.grppj.donateblood.model.User;

@Repository
public class UserRepository {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    // =================== GENERAL USER METHODS ===================

    public boolean emailExists(String email) {
        String sql = "SELECT COUNT(*) FROM user WHERE email = ?";
        Integer count = jdbcTemplate.queryForObject(sql, Integer.class, email);
        return count != null && count > 0;
    }

    public boolean usernameExists(String username) {
        String sql = "SELECT COUNT(*) FROM user WHERE username = ?";
        Integer count = jdbcTemplate.queryForObject(sql, Integer.class, username);
        return count != null && count > 0;
    }

    public int doRegister(User user) {
        String sql = "INSERT INTO user (username, email, password, gender, dateofbirth, address, phone, role_id, image) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Integer roleId = user.getRole() != null ? user.getRole().getId() : 1;

        byte[] imageBytes = null;
        try {
            if (user.getFilePart() != null && !user.getFilePart().isEmpty()) {
                imageBytes = user.getFilePart().getBytes();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return jdbcTemplate.update(sql,
                user.getUsername(),
                user.getEmail(),
                user.getPassword(),
                user.getGender(),
                user.getDateofbirth(),
                user.getAddress(),
                user.getPhone(),
                roleId,
                imageBytes
        );
    }

    public List<RoleBean> getAllRoles() {
        String sql = "SELECT id, role FROM role";
        return jdbcTemplate.query(sql, (rs, rowNum) -> {
            RoleBean role = new RoleBean();
            role.setId(rs.getInt("id"));
            role.setRole(rs.getString("role"));
            return role;
        });
    }

    public RoleBean getRoleById(int id) {
        try {
            String sql = "SELECT id, role FROM role WHERE id = ?";
            return jdbcTemplate.queryForObject(sql, (rs, rowNum) -> {
                RoleBean role = new RoleBean();
                role.setId(rs.getInt("id"));
                role.setRole(rs.getString("role"));
                return role;
            }, id);
        } catch (Exception e) {
            return null;
        }
    }

    public User getUserById(int id) {
        String sql = "SELECT u.id, u.username, u.email, u.password, u.gender, u.dateofbirth, u.address, u.phone, u.image, r.id as role_id, r.role " +
                     "FROM user u JOIN role r ON u.role_id = r.id WHERE u.id = ?";
        return jdbcTemplate.queryForObject(sql, (rs, rowNum) -> {
            User user = new User();
            user.setId(rs.getInt("id"));
            user.setUsername(rs.getString("username"));
            user.setEmail(rs.getString("email"));
            user.setPassword(rs.getString("password"));
            user.setGender(rs.getString("gender"));
            if (rs.getDate("dateofbirth") != null)
                user.setDateofbirth(rs.getDate("dateofbirth").toLocalDate());
            user.setAddress(rs.getString("address"));
            user.setPhone(rs.getString("phone"));
            user.setRole(new RoleBean(rs.getInt("role_id"), rs.getString("role")));
            user.setImageBytes(rs.getBytes("image"));
            return user;
        }, id);
    }

    public User getUserByEmail(String email) {
        try {
            String sql = "SELECT u.id, u.username, u.email, u.password, u.gender, u.dateofbirth, u.address, u.phone, u.image, r.id as role_id, r.role, u.hospital_id, u.auto_generated_code " +
                         "FROM user u JOIN role r ON u.role_id = r.id WHERE u.email = ?";
            return jdbcTemplate.queryForObject(sql, (rs, rowNum) -> {
                User user = new User();
                user.setId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));
                user.setEmail(rs.getString("email"));
                user.setPassword(rs.getString("password"));
                user.setGender(rs.getString("gender"));
                if (rs.getDate("dateofbirth") != null)
                    user.setDateofbirth(rs.getDate("dateofbirth").toLocalDate());
                user.setAddress(rs.getString("address"));
                user.setPhone(rs.getString("phone"));
                user.setRole(new RoleBean(rs.getInt("role_id"), rs.getString("role")));
                user.setHospitalId(rs.getInt("hospital_id"));
                user.setImageBytes(rs.getBytes("image"));
                user.setAutoGeneratedCode(rs.getString("auto_generated_code")); // admin OTP
                return user;
            }, email);
        } catch (Exception e) {
            return null;
        }
    }

    public int updateUser(User user) {
        String sql = "UPDATE user SET username = ?, email = ?, password = ?, address = ?, phone = ?, image = ? WHERE id = ?";
        return jdbcTemplate.update(sql,
            user.getUsername(),
            user.getEmail(),
            user.getPassword(),
            user.getAddress(),
            user.getPhone(),
            user.getImageBytes(),
            user.getId()
        );
    }

    public int updateUserPassword(int userId, String newPassword) {
        String sql = "UPDATE user SET password = ? WHERE id = ?";
        return jdbcTemplate.update(sql, newPassword, userId);
    }

    public int updateUserImage(int userId, byte[] imageBytes) {
        if (imageBytes == null) return 0;
        String sql = "UPDATE user SET image = ? WHERE id = ?";
        return jdbcTemplate.update(sql, imageBytes, userId);
    }

    // =================== ADMIN-SPECIFIC METHODS ===================

 // Find admin by email
    public User findAdminByEmail(String email) {
        String sql = "SELECT * FROM user WHERE email = ? AND role_id = 2";
        try {
            return jdbcTemplate.queryForObject(sql, (rs, rowNum) -> {
                User admin = new User();
                admin.setId(rs.getInt("id"));
                admin.setUsername(rs.getString("username"));
                admin.setEmail(rs.getString("email"));
                admin.setPassword(rs.getString("password")); // null if first login
                admin.setHospitalId(rs.getInt("hospital_id"));
                admin.setAutoGeneratedCode(rs.getString("auto_generated_code")); // OTP
                return admin;
            }, email);
        } catch (Exception e) {
            return null;
        }
    }

    // List all admins
    public List<User> findAllAdmins() {
        String sql = "SELECT * FROM user WHERE role_id = 2";
        return jdbcTemplate.query(sql, (rs, rowNum) -> {
            User admin = new User();
            admin.setId(rs.getInt("id"));
            admin.setUsername(rs.getString("username"));
            admin.setEmail(rs.getString("email"));
            admin.setHospitalId(rs.getInt("hospital_id"));
            return admin;
        });
    }

 // Create admin (superadmin) with OTP
    public boolean createAdmin(String username, String email, Integer hospitalId, String otpCode) {
        String sql = "INSERT INTO user (username, email, role_id, hospital_id, auto_generated_code) VALUES (?, ?, 2, ?, ?)";
        return jdbcTemplate.update(sql, username, email, hospitalId, otpCode) > 0;
    }
    
 // Save OTP for admin (used by superadmin or first login)
    public boolean saveOTP(String email, String code) {
        String sql = "UPDATE user SET auto_generated_code = ? WHERE email = ? AND role_id = 2";
        return jdbcTemplate.update(sql, code, email) > 0;
    }

    // Verify OTP
    public boolean verifyAdminOTP(String email, String otp) {
        String sql = "SELECT COUNT(*) FROM user WHERE email = ? AND auto_generated_code = ? AND role_id = 2";
        Integer count = jdbcTemplate.queryForObject(sql, Integer.class, email, otp);
        return count != null && count > 0;
    }

    // Set password and clear OTP
    public boolean setAdminPassword(int adminId, String newPassword) {
        String sql = "UPDATE user SET password = ?, auto_generated_code = NULL WHERE id = ? AND role_id = 2";
        return jdbcTemplate.update(sql, newPassword, adminId) > 0;
    }

    // Normal login with email + password
    public User adminLogin(String email, String password) {
        String sql = "SELECT * FROM user WHERE email = ? AND password = ? AND role_id = 2";
        try {
            return jdbcTemplate.queryForObject(sql, (rs, rowNum) -> {
                User admin = new User();
                admin.setId(rs.getInt("id"));
                admin.setUsername(rs.getString("username"));
                admin.setEmail(rs.getString("email"));
                admin.setPassword(rs.getString("password"));
                admin.setHospitalId(rs.getInt("hospital_id"));
                return admin;
            }, email, password);
        } catch (Exception e) {
            return null;
        }
    }

    // Assign/unassign hospital for admin
    public boolean assignAdminToHospital(int adminId, int hospitalId) {
        String sql = "UPDATE user SET hospital_id = ? WHERE id = ? AND role_id = 2";
        return jdbcTemplate.update(sql, hospitalId, adminId) > 0;
    }

    public boolean unassignAdminFromHospital(int adminId) {
        String sql = "UPDATE user SET hospital_id = NULL WHERE id = ? AND role_id = 2";
        return jdbcTemplate.update(sql, adminId) > 0;
    }

    // Delete admin
    public boolean deleteAdmin(int adminId) {
        String sql = "DELETE FROM user WHERE id = ? AND role_id = 2";
        return jdbcTemplate.update(sql, adminId) > 0;
    }
    
    public List<User> findAdminsByHospital(Integer hospitalId) {
        String sql = "SELECT u.* FROM user u WHERE u.hospital_id = ? AND u.role_id = 2";
        try {
            return jdbcTemplate.query(sql, (rs, rowNum) -> {
                User user = new User();
                user.setId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));
                user.setEmail(rs.getString("email"));
                user.setHospitalId(rs.getInt("hospital_id"));
                return user;
            }, hospitalId);
        } catch (Exception e) {
            return List.of();
        }
    }
}
